/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => BasesTemplatePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// templater.ts
var import_obsidian = require("obsidian");
async function templater(app, template, _target) {
  const activeFile = template || app.workspace.getActiveFile();
  const targetFile = _target || activeFile;
  if (!activeFile) {
    new import_obsidian.Notice("No active file found for templater processing.");
    return;
  }
  const config = {
    template_file: template,
    active_file: activeFile,
    target_file: targetFile,
    run_mode: "DynamicProcessor"
  };
  const plugins = app.plugins.plugins;
  const exists = plugins["templater-obsidian"];
  if (!exists) {
    new import_obsidian.Notice("Templater is not installed. Please install it.");
    return;
  }
  try {
    const { templater: templater2 } = plugins["templater-obsidian"];
    const functions = await templater2.functions_generator.internal_functions.generate_object(
      config
    );
    functions.user = {};
    const userScriptFunctions = await templater2.functions_generator.user_functions.user_script_functions.generate_user_script_functions(
      config
    );
    userScriptFunctions.forEach((value, key) => {
      functions.user[key] = value;
    });
    if (activeFile) {
      const userSystemFunctions = await templater2.functions_generator.user_functions.user_system_functions.generate_system_functions(
        config
      );
      userSystemFunctions.forEach((value, key) => {
        functions.user[key] = value;
      });
    }
    return async (command) => {
      return await templater2.parser.parse_commands(command, functions);
    };
  } catch (error) {
    console.error("Error setting up templater functions:", error);
    new import_obsidian.Notice(
      "Error setting up templater functions. Check console for details."
    );
    return;
  }
}
async function processTemplate(app, file) {
  try {
    const content = await app.vault.read(file);
    const runTemplater = await templater(app, file, file);
    if (runTemplater) {
      const processed = await runTemplater(content);
      return processed;
    }
  } catch (e) {
    new import_obsidian.Notice(`There was an error processing the template!`, 2e3);
  }
}

// settings.ts
var import_obsidian2 = require("obsidian");
var DEFAULT_SETTINGS = {
  templateProperty: "template"
};
var BasesTemplateSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Bases Template Plugin Settings" });
    new import_obsidian2.Setting(containerEl).setName("Template property").setDesc(
      "Frontmatter property to check for template links. Defaults to 'template'."
    ).addText(
      (text) => text.setPlaceholder("template").setValue(this.plugin.settings.templateProperty).onChange(async (value) => {
        this.plugin.settings.templateProperty = value.trim() || "template";
        await this.plugin.saveSettings();
      })
    );
  }
};

// main.ts
var BasesTemplatePlugin = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new BasesTemplateSettingTab(this.app, this));
    this.app.workspace.onLayoutReady(() => {
      this.registerEvent(
        this.app.vault.on("create", async (file) => {
          var _a, _b, _c, _d, _e, _f, _g, _h;
          if (!file.basename.startsWith("Untitled"))
            return;
          await new Promise((resolve) => setTimeout(resolve, 100));
          const fm = (_a = this.app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter;
          if (!fm)
            return;
          const value = fm[this.settings.templateProperty];
          if (!value)
            return;
          const values = Array.isArray(value) ? value : [value];
          for (const item of values) {
            if (typeof item !== "string")
              continue;
            const link = (_b = item.match(/\[\[(.*?)\]\]/)) == null ? void 0 : _b[1];
            if (!link)
              continue;
            const templateFile = this.app.metadataCache.getFirstLinkpathDest(
              link,
              file.path
            );
            if (!templateFile)
              continue;
            const path = templateFile.path.toLowerCase();
            const templatesEnabled = !!((_c = this.app.internalPlugins.plugins.templates) == null ? void 0 : _c.enabled);
            const templaterEnabled = !!this.app.plugins.plugins["templater-obsidian"];
            const templateFolder = (_e = (_d = this.app.internalPlugins.plugins.templates) == null ? void 0 : _d.instance.options.folder) == null ? void 0 : _e.toLowerCase();
            const templaterFolder = (_h = (_g = (_f = this.app.plugins.plugins["templater-obsidian"]) == null ? void 0 : _f.settings) == null ? void 0 : _g.templates_folder) == null ? void 0 : _h.toLowerCase();
            if (templatesEnabled && templateFolder && path.startsWith(templateFolder)) {
              await this.app.workspace.openLinkText(file.path, "", false);
              await this.app.internalPlugins.plugins.templates.instance.insertTemplate(
                templateFile
              );
            } else if (templaterEnabled && templaterFolder && path.startsWith(templaterFolder)) {
              const processed = await processTemplate(this.app, templateFile);
              if (processed) {
                await this.app.vault.modify(file, processed);
              }
            }
          }
        })
      );
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
